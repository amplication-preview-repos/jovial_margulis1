/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Feed } from "./Feed";
import { FeedCountArgs } from "./FeedCountArgs";
import { FeedFindManyArgs } from "./FeedFindManyArgs";
import { FeedFindUniqueArgs } from "./FeedFindUniqueArgs";
import { CreateFeedArgs } from "./CreateFeedArgs";
import { UpdateFeedArgs } from "./UpdateFeedArgs";
import { DeleteFeedArgs } from "./DeleteFeedArgs";
import { Search } from "../../search/base/Search";
import { FeedService } from "../feed.service";
@graphql.Resolver(() => Feed)
export class FeedResolverBase {
  constructor(protected readonly service: FeedService) {}

  async _feedsMeta(
    @graphql.Args() args: FeedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Feed])
  async feeds(@graphql.Args() args: FeedFindManyArgs): Promise<Feed[]> {
    return this.service.feeds(args);
  }

  @graphql.Query(() => Feed, { nullable: true })
  async feed(@graphql.Args() args: FeedFindUniqueArgs): Promise<Feed | null> {
    const result = await this.service.feed(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Feed)
  async createFeed(@graphql.Args() args: CreateFeedArgs): Promise<Feed> {
    return await this.service.createFeed({
      ...args,
      data: {
        ...args.data,

        search: args.data.search
          ? {
              connect: args.data.search,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Feed)
  async updateFeed(@graphql.Args() args: UpdateFeedArgs): Promise<Feed | null> {
    try {
      return await this.service.updateFeed({
        ...args,
        data: {
          ...args.data,

          search: args.data.search
            ? {
                connect: args.data.search,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Feed)
  async deleteFeed(@graphql.Args() args: DeleteFeedArgs): Promise<Feed | null> {
    try {
      return await this.service.deleteFeed(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Search, {
    nullable: true,
    name: "search",
  })
  async getSearch(@graphql.Parent() parent: Feed): Promise<Search | null> {
    const result = await this.service.getSearch(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
